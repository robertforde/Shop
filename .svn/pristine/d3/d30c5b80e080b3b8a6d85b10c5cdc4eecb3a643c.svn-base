package com.daniel;
import java.awt.Color;
import java.awt.Component;
import java.awt.SystemColor;

import javax.swing.JFrame;

import com.daniel.dao.DAO;
import com.daniel.model.InvoiceSettings;
import com.daniel.model.RetailOrder;
import com.daniel.model.RetailOrderLine;
import com.daniel.model.TradeOrder;
import com.daniel.model.TradeOrderLine;

import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.JRadioButton;

import java.awt.Font;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.border.BevelBorder;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

import net.proteanit.sql.DbUtils;

import javax.swing.ListSelectionModel;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;

import com.toedter.calendar.JDateChooser;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

public class ConvertQuotation extends JFrame{

	private DAO dao;
	private InvoiceSettings invoiceSettings;
	private RetailOrderScreen retailOrderScreen;
	private TradeOrderScreen tradeOrderScreen;
	private JTabbedPane tabbedPane;
	
	private static final long serialVersionUID = 1L;
	
	private JFrame quoteDetailList;
	
	private JTextField txtConvertQuotationNo;
	private JTextField txtConvertName;
	private JTextField txtConvertPhone;
	private JTextField txtConvertValue;
	private JTextField txtConvertAddress;
	
	private JTable tblQuotationsFiltered;
	
	private JRadioButton rdbtnConvertRetailQuotations;
	private JRadioButton rdbtnConvertTradeQuotations;
	
	private JDateChooser txtConvertFromDate;
	private JDateChooser txtConvertToDate;
	
	private int selectedQuoteNo;
	private JTextField txtConvertSrchItemCode;
	private JTextField txtConvertSrchItemDesc;
	
	public DAO getDao() {
		return dao;
	}

	public void setDao(DAO dao) {
		this.dao = dao;
	}

	public InvoiceSettings getInvoiceSettings() {
		return invoiceSettings;
	}

	public void setInvoiceSettings(InvoiceSettings invoiceSettings) {
		this.invoiceSettings = invoiceSettings;
	}

	public RetailOrderScreen getRetailOrderScreen() {
		return retailOrderScreen;
	}

	public void setRetailOrderScreen(RetailOrderScreen retailOrderScreen) {
		this.retailOrderScreen = retailOrderScreen;
	}
	
	public TradeOrderScreen getTradeOrderScreen() {
		return tradeOrderScreen;
	}

	public void setTradeOrderScreen(TradeOrderScreen tradeOrderScreen) {
		this.tradeOrderScreen = tradeOrderScreen;
	}

	public JTabbedPane getTabbedPane() {
		return tabbedPane;
	}

	public void setTabbedPane(JTabbedPane tabbedPane) {
		this.tabbedPane = tabbedPane;
	}

	
	public ConvertQuotation(DAO dao, InvoiceSettings invoiceSettings, RetailOrderScreen retailOrderScreen, TradeOrderScreen tradeOrderScreen, JTabbedPane tabbedPane){
		getContentPane().setBackground(Color.DARK_GRAY);
		
		setDao(dao);
		setInvoiceSettings(invoiceSettings);
		setRetailOrderScreen(retailOrderScreen);
		setTradeOrderScreen(tradeOrderScreen);
		setTabbedPane(tabbedPane);
		
		setBounds(30, 50, 1310, 629);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		
		JPanel panelConvertSalesTypeChoice = new JPanel();
		panelConvertSalesTypeChoice.setBackground(UIManager.getColor("List.dropLineColor"));
		panelConvertSalesTypeChoice.setBounds(128, 25, 199, 38);
		getContentPane().add(panelConvertSalesTypeChoice);
		panelConvertSalesTypeChoice.setLayout(null);
		
		rdbtnConvertRetailQuotations = new JRadioButton("Retail");
		rdbtnConvertRetailQuotations.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				
				if(txtConvertSrchItemCode.getText().equals("") && txtConvertSrchItemDesc.getText().equals(""))
					filterQuotations(null);
				else
					filterQuotationsByItem(null);
			}
		});
		rdbtnConvertRetailQuotations.setSelected(true);
		rdbtnConvertRetailQuotations.setBackground(UIManager.getColor("List.dropLineColor"));
		rdbtnConvertRetailQuotations.setFont(new Font("Georgia", Font.BOLD, 18));
		rdbtnConvertRetailQuotations.setBounds(16, 7, 81, 23);
		panelConvertSalesTypeChoice.add(rdbtnConvertRetailQuotations);
		
		rdbtnConvertTradeQuotations = new JRadioButton("Trade");
		rdbtnConvertTradeQuotations.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				if(txtConvertSrchItemCode.getText().equals("") && txtConvertSrchItemDesc.getText().equals(""))
					filterQuotations(null);
				else
					filterQuotationsByItem(null);
			}
		});
		rdbtnConvertTradeQuotations.setFont(new Font("Georgia", Font.BOLD, 18));
		rdbtnConvertTradeQuotations.setBackground(UIManager.getColor("List.dropLineColor"));
		rdbtnConvertTradeQuotations.setBounds(107, 7, 81, 23);
		panelConvertSalesTypeChoice.add(rdbtnConvertTradeQuotations);
		
		// Group the radio buttons.
		ButtonGroup quoteTypegroup = new ButtonGroup();
		quoteTypegroup.add(rdbtnConvertRetailQuotations);
		quoteTypegroup.add(rdbtnConvertTradeQuotations);
		
		JPanel panelConvertQuotationList = new JPanel();
		panelConvertQuotationList.setBackground(UIManager.getColor("List.dropLineColor"));
		panelConvertQuotationList.setBounds(44, 85, 1195, 497);
		getContentPane().add(panelConvertQuotationList);
		panelConvertQuotationList.setLayout(null);
		
		JLabel lblConvertToDate = new JLabel("To Date");
		lblConvertToDate.setBounds(830, 26, 90, 25);
		panelConvertQuotationList.add(lblConvertToDate);
		lblConvertToDate.setFont(new Font("Georgia", Font.BOLD, 16));
		
		JLabel lblConvertFromDate = new JLabel("From Date");
		lblConvertFromDate.setBounds(726, 26, 94, 25);
		panelConvertQuotationList.add(lblConvertFromDate);
		lblConvertFromDate.setFont(new Font("Georgia", Font.BOLD, 16));
		
		txtConvertName = new JTextField();
		txtConvertName.addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent e) {
				
				if(txtConvertSrchItemCode.getText().equals("") && txtConvertSrchItemDesc.getText().equals(""))
					filterQuotations(e);
				else
					filterQuotationsByItem(e);
			}
		});
		txtConvertName.setBounds(125, 51, 226, 25);
		panelConvertQuotationList.add(txtConvertName);
		txtConvertName.setFont(new Font("Georgia", Font.PLAIN, 16));
		txtConvertName.setColumns(10);
		
		JLabel lblConvertName = new JLabel("Name");
		lblConvertName.setBounds(125, 26, 226, 25);
		panelConvertQuotationList.add(lblConvertName);
		lblConvertName.setFont(new Font("Georgia", Font.BOLD, 16));
		
		JLabel lblConvertQuotationNo = new JLabel("Quote No.");
		lblConvertQuotationNo.setBounds(29, 24, 86, 25);
		panelConvertQuotationList.add(lblConvertQuotationNo);
		lblConvertQuotationNo.setFont(new Font("Georgia", Font.BOLD, 16));
		
		txtConvertQuotationNo = new JTextField();
		txtConvertQuotationNo.addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent arg0) {
				
				if(txtConvertSrchItemCode.getText().equals("") && txtConvertSrchItemDesc.getText().equals(""))
					filterQuotations(arg0);
				else
					filterQuotationsByItem(arg0);
			}
		});
		txtConvertQuotationNo.setBounds(29, 51, 86, 25);
		panelConvertQuotationList.add(txtConvertQuotationNo);
		txtConvertQuotationNo.setColumns(10);
		
		JLabel lblConvertPhone = new JLabel("Phone");
		lblConvertPhone.setFont(new Font("Georgia", Font.BOLD, 16));
		lblConvertPhone.setBounds(934, 24, 128, 25);
		panelConvertQuotationList.add(lblConvertPhone);
		
		JLabel lblConvertValue = new JLabel("Value");
		lblConvertValue.setFont(new Font("Georgia", Font.BOLD, 16));
		lblConvertValue.setBounds(1072, 24, 94, 25);
		panelConvertQuotationList.add(lblConvertValue);
		
		txtConvertPhone = new JTextField();
		txtConvertPhone.addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent e) {
				
				if(txtConvertSrchItemCode.getText().equals("") && txtConvertSrchItemDesc.getText().equals(""))
					filterQuotations(e);
				else
					filterQuotationsByItem(e);
			}
		});
		txtConvertPhone.setFont(new Font("Georgia", Font.PLAIN, 16));
		txtConvertPhone.setColumns(10);
		txtConvertPhone.setBounds(934, 51, 127, 25);
		panelConvertQuotationList.add(txtConvertPhone);
		
		txtConvertValue = new JTextField();
		txtConvertValue.addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent e) {
				
				if(txtConvertSrchItemCode.getText().equals("") && txtConvertSrchItemDesc.getText().equals(""))
					filterQuotations(e);
				else
					filterQuotationsByItem(e);
			}
		});
		txtConvertValue.setFont(new Font("Georgia", Font.PLAIN, 16));
		txtConvertValue.setColumns(10);
		txtConvertValue.setBounds(1072, 51, 94, 25);
		panelConvertQuotationList.add(txtConvertValue);
		
		JPanel panelQuotationFiltered = new JPanel();
		panelQuotationFiltered.setBackground(Color.WHITE);
		panelQuotationFiltered.setBounds(29, 106, 1137, 360);
		panelConvertQuotationList.add(panelQuotationFiltered);
		panelQuotationFiltered.setLayout(null);
		
		JScrollPane scrlQuotationsFiltered = new JScrollPane();
		scrlQuotationsFiltered.setBounds(0, 0, 1137, 360);
		panelQuotationFiltered.add(scrlQuotationsFiltered);
		
		tblQuotationsFiltered = new JTable(){
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
		    public boolean isCellEditable(int row, int column)
		    {
		        return false;
		    }
			
			public TableCellRenderer getCellRenderer( int row, int col ) { 
				
				TableCellRenderer renderer = super.getCellRenderer(row,col);
				
				// Right justify the last column (Total Value)
				if ( col == dataModel.getColumnCount() - 1 ) 
					((JLabel) renderer).setHorizontalAlignment( SwingConstants.RIGHT );
				
				// Left justify the other columns
				else 
					((JLabel) renderer).setHorizontalAlignment( SwingConstants.LEFT );
				
				return renderer; 
			}
			
		};
		tblQuotationsFiltered.setFont(new Font("Times New Roman", Font.PLAIN, 14));
		tblQuotationsFiltered.getTableHeader().setFont(new Font("Times New Roman", Font.BOLD, 14));
		tblQuotationsFiltered.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {

				String query;
				PreparedStatement pst;
				ResultSet rs;
				int row;

				// We use the table's getSelectedRow() method to find the row that the User selected. 
				row = tblQuotationsFiltered.getSelectedRow();
				
				// Then we can get the id of the selected quote by getting the model of the table and then using the getValueAt() method we can get the specific
				// row and column that we require. This returns an Object so we get the toString and then convert it to an Integer.
				selectedQuoteNo = Integer.parseInt(tblQuotationsFiltered.getModel().getValueAt(row, 0).toString());
				
				quoteDetailList = new JFrame();
				quoteDetailList.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
				quoteDetailList.setBounds(200, 200, 900, 383);
				quoteDetailList.setVisible(true);
				
				JButton btnQuoteDetailConvert = new JButton("CONVERT");
				btnQuoteDetailConvert.setBounds(353, 300, 126, 38);
				btnQuoteDetailConvert.setFont(new Font("Georgia", Font.BOLD, 16));
				quoteDetailList.getContentPane().add(btnQuoteDetailConvert);
				btnQuoteDetailConvert.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						
						if(ConvertQuotation.this.rdbtnConvertRetailQuotations.isSelected()){
							RetailOrder retailOrder = new RetailOrder();
							ArrayList<RetailOrderLine> orderList = new ArrayList<RetailOrderLine>();
							String query;
							PreparedStatement pst;
							ResultSet rs;
			
							try {
								
								// We find this quote in the quoteheader table and load it's values into the retailOrder object that we created.
								query = "SELECT * FROM quoteheader WHERE quotationNo = ?";
								pst = getDao().conn.prepareStatement(query);
								pst.setInt(1, selectedQuoteNo);
								rs = pst.executeQuery();
								
								while(rs.next()){
									retailOrder.setRepNo(rs.getString(2));
									retailOrder.setTotalExVat(String.valueOf(rs.getFloat(3)));
									retailOrder.setTotalVat(String.valueOf(rs.getFloat(4)));
									retailOrder.setTotalPreRounding(String.valueOf(rs.getFloat(5)));
									retailOrder.setRounding(String.valueOf(rs.getFloat(6)));
									retailOrder.setTotalPostRounding(String.valueOf(rs.getFloat(7)));
									retailOrder.setOrderDate(rs.getDate(8));
									retailOrder.setPayType(rs.getString(9));
									retailOrder.setSaleType("Retail");
									retailOrder.setTotalCost(rs.getFloat(11));
									retailOrder.setCustId(rs.getInt(12));
									retailOrder.setName(rs.getString(13));
									retailOrder.setAddress1(rs.getString(14));
									retailOrder.setAddress2(rs.getString(15));
									retailOrder.setPhone(rs.getString(16));
								}
								
								// We find this quote in the quotedetail table and load it's details into the orderlist variable.
								query = "SELECT * FROM quotedetail WHERE quotationNo = ?";
								pst = getDao().conn.prepareStatement(query);
								
								pst.setInt(1, selectedQuoteNo);
								rs = pst.executeQuery(); 
							
								while(rs.next()){
									RetailOrderLine retailOrderLine = new RetailOrderLine();
									retailOrderLine.setItemCode(rs.getString(3));
									retailOrderLine.setItemDescription(rs.getString(4));
									retailOrderLine.setOrderQty(String.valueOf(rs.getInt(5)));
									retailOrderLine.setItemPrice(String.valueOf(rs.getFloat(6)));
									retailOrderLine.setItemTradePrice(rs.getFloat(7));
									retailOrderLine.setValueExDiscount(String.valueOf(rs.getFloat(8)));
									retailOrderLine.setDiscountPercent(String.valueOf(rs.getFloat(9)));
									retailOrderLine.setDiscountValue(String.valueOf(rs.getFloat(10)));
									retailOrderLine.setValueExVat(String.valueOf(rs.getFloat(11)));
									retailOrderLine.setLineCostValue(rs.getFloat(12));
									orderList.add(retailOrderLine);
								}
								
								// Assign orderlist to the orderlist of the retailOrder object we created
								retailOrder.setOrderList(orderList);
								
								pst.close();
								rs.close();
							
							} catch (SQLException ex) {
								JOptionPane.showMessageDialog(null, ex);
							}
							
							// Make this retailOrder the retailOrder for the retailOrderScreen
							getRetailOrderScreen().setRetailOrder(retailOrder);
								
							// Run the refreshCurrentOrder() method of the retailOrderScreen to update the current order table on the retailOrderScreen
							getRetailOrderScreen().refreshCurrentOrderTable();
								
							// Make all of the appropriate panels visible on the RetailOrderScreen
							getRetailOrderScreen().getPanelCustCurrentOrder().setVisible(true);
							getRetailOrderScreen().getPanelCustDetails().setVisible(true);
							getRetailOrderScreen().getPanelCustGrossProfit().setVisible(true);
							getRetailOrderScreen().getPanelCustNewOrder().setVisible(true);
							getRetailOrderScreen().getPanelCustPaymentMethod().setVisible(true);
							getRetailOrderScreen().getPanelCustPrintOrder().setVisible(true);
							getRetailOrderScreen().getPanelCustRounding().setVisible(true);
								
							// Update the gross profit labels and the total labels on the RetailOrderScreen 
							getRetailOrderScreen().getLblCustTotalExVat().setText(retailOrder.getTotalExVat());
							getRetailOrderScreen().getLblCustTotalPrice().setText(retailOrder.getTotalPostRounding());
							retailOrder.calcGrossProfit(getRetailOrderScreen().getLblCustGrossProfitValue(), getRetailOrderScreen().getLblCustGrossProfitPercent());
								
							// Update the rep code on the RetailOrderScreen
							getRetailOrderScreen().getTxtCustLineRep().setText((retailOrder.getRepNo()));
							getRetailOrderScreen().getTxtCustLineRep().setEnabled(false);
							getRetailOrderScreen().getTxtCustLineRep().setEditable(false);
								
							// Set the tab on the tabbed pane to the Retail Order Screen
							getTabbedPane().setSelectedIndex(0);
							
						}else{
							
							TradeOrder tradeOrder = new TradeOrder();
							ArrayList<TradeOrderLine> orderList = new ArrayList<TradeOrderLine>();
							String query;
							PreparedStatement pst;
							ResultSet rs;
			
							try {
								
								// We find this quote in the quoteheader table and load it's values into the tradeOrder object that we created.
								query = "SELECT * FROM quoteheader WHERE quotationNo = ?";
								pst = getDao().conn.prepareStatement(query);
								pst.setInt(1, selectedQuoteNo);
								rs = pst.executeQuery();
								
								while(rs.next()){
									tradeOrder.setRepNo(rs.getString(2));
									tradeOrder.setTotalExVat(String.valueOf(rs.getFloat(3)));
									tradeOrder.setTotalVat(String.valueOf(rs.getFloat(4)));
									tradeOrder.setTotalPreRounding(String.valueOf(rs.getFloat(5)));
									tradeOrder.setRounding(String.valueOf(rs.getFloat(6)));
									tradeOrder.setTotalPostRounding(String.valueOf(rs.getFloat(7)));
									tradeOrder.setOrderDate(rs.getDate(8));
									tradeOrder.setPayType(rs.getString(9));
									tradeOrder.setSaleType("Trade");
									tradeOrder.setTotalCost(rs.getFloat(11));
									tradeOrder.setCustId(rs.getInt(12));
									tradeOrder.setName(rs.getString(13));
									tradeOrder.setAddress1(rs.getString(14));
									tradeOrder.setAddress2(rs.getString(15));
									tradeOrder.setPhone(rs.getString(16));
								}
								
								// We find this quote in the quotedetail table and load it's details into the orderlist variable.
								query = "SELECT * FROM quotedetail WHERE quotationNo = ?";
								pst = getDao().conn.prepareStatement(query);
								
								pst.setInt(1, selectedQuoteNo);
								rs = pst.executeQuery(); 
							
								while(rs.next()){
									TradeOrderLine tradeOrderLine = new TradeOrderLine();
									tradeOrderLine.setItemCode(rs.getString(3));
									tradeOrderLine.setItemDescription(rs.getString(4));
									tradeOrderLine.setOrderQty(String.valueOf(rs.getInt(5)));
									tradeOrderLine.setItemPrice(String.valueOf(rs.getFloat(6)));
									tradeOrderLine.setItemTradePrice(rs.getFloat(7));
									tradeOrderLine.setValueExDiscount(String.valueOf(rs.getFloat(8)));
									tradeOrderLine.setValueExVat(String.valueOf(rs.getFloat(11)));
									tradeOrderLine.setLineCostValue(rs.getFloat(12));
									orderList.add(tradeOrderLine);
								}
								
								// Assign orderlist to the orderlist of the tradeOrder object we created
								tradeOrder.setOrderList(orderList);
								
								pst.close();
								rs.close();
							
							} catch (SQLException ex) {
								JOptionPane.showMessageDialog(null, ex);
							}
							
							// Make this tradeOrder the tradeOrder for the tradeOrderScreen
							getTradeOrderScreen().setTradeOrder(tradeOrder);
								
							// Run the refreshCurrentOrder() method of the tradeOrderScreen to update the current order table on the tradeOrderScreen
							getTradeOrderScreen().refreshCurrentOrderTable();
								
							// Make all of the appropriate panels visible on the TradeOrderScreen
							getTradeOrderScreen().getPanelTradeCurrentOrder().setVisible(true);
							getTradeOrderScreen().getPanelTradeDetails().setVisible(true);
							getTradeOrderScreen().getPanelTradeGrossProfit().setVisible(true);
							getTradeOrderScreen().getPanelTradeNewOrder().setVisible(true);
							getTradeOrderScreen().getPanelTradePaymentMethod().setVisible(true);
							getTradeOrderScreen().getPanelTradePrintOrder().setVisible(true);
							getTradeOrderScreen().getPanelTradeRounding().setVisible(true);
								
							// Update the gross profit labels and the total labels on the TradeOrderScreen 
							getTradeOrderScreen().getLblTradeTotalExVat().setText(tradeOrder.getTotalExVat());
							getTradeOrderScreen().getLblTradeTotalPrice().setText(tradeOrder.getTotalPostRounding());
							tradeOrder.calcGrossProfit(getTradeOrderScreen().getLblTradeGrossProfitValue(), getTradeOrderScreen().getLblTradeGrossProfitPercent());
								
							// Update the rep code on the TradeOrderScreen
							getTradeOrderScreen().getTxtTradeLineRep().setText((tradeOrder.getRepNo()));
							getTradeOrderScreen().getTxtTradeLineRep().setEnabled(false);
							getTradeOrderScreen().getTxtTradeLineRep().setEditable(false);
								
							// Set the tab on the tabbed pane to the Trade Order Screen
							getTabbedPane().setSelectedIndex(1);
							
						}	
						
						// Close this JFrame and the ConvertQuotation screen 
						ConvertQuotation.this.dispose();
						quoteDetailList.dispose();
					}
				});
				
				
				JPanel paneQuoteDetailTable = new JPanel();
				paneQuoteDetailTable.setBorder(new BevelBorder(BevelBorder.LOWERED, null, SystemColor.controlShadow, null, new Color(105, 105, 105)));
				paneQuoteDetailTable.setBounds(30, 30, 648, 264);
				paneQuoteDetailTable.setBackground(Color.DARK_GRAY);
				quoteDetailList.getContentPane().add(paneQuoteDetailTable);
				paneQuoteDetailTable.setLayout(null);
								
				JTable tblQuoteDetail = new JTable(){
					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					@Override
				    public boolean isCellEditable(int row, int column)
				    {
				        return false;
				    }
					
					public TableCellRenderer getCellRenderer( int row, int col ) { 
						
						TableCellRenderer renderer = super.getCellRenderer(row,col);
						
						// Right justify the last column (Total Value)
						if ( col == dataModel.getColumnCount() - 1 || col == dataModel.getColumnCount() - 2 || col == dataModel.getColumnCount() - 3 ) 
							((JLabel) renderer).setHorizontalAlignment( SwingConstants.RIGHT );
						
						// Left justify the other columns
						else 
							((JLabel) renderer).setHorizontalAlignment( SwingConstants.LEFT );
						
						return renderer; 
					}
					
				};
				tblQuoteDetail.setFont(new Font("Times New Roman", Font.PLAIN, 14));
				tblQuoteDetail.getTableHeader().setFont(new Font("Times New Roman", Font.BOLD, 14));
				
				try {
					
					// We find this quote in the quotedetail table and load it's details so the user can see if it's the correct quotation
					query = "SELECT itemCode AS ITEM, itemDescription AS DESCRIPTION, qty AS QTY, FORMAT(price,2) AS PRICE, FORMAT(discPercent,2) AS DISCOUNT, FORMAT(valueExVat,2) AS 'EX VAT' FROM quotedetail WHERE quotationNo = ?";
					pst = getDao().conn.prepareStatement(query);
					
					pst.setInt(1, selectedQuoteNo);
					rs = pst.executeQuery(); 
					
					tblQuoteDetail.setModel(DbUtils.resultSetToTableModel(rs));
					tblQuoteDetail.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
				
					TableColumnModel columnModel = tblQuoteDetail.getColumnModel();
					columnModel.getColumn(0).setPreferredWidth(117);
					columnModel.getColumn(1).setPreferredWidth(400);
					columnModel.getColumn(2).setPreferredWidth(37);
					columnModel.getColumn(3).setPreferredWidth(60);
					columnModel.getColumn(4).setPreferredWidth(80);
					columnModel.getColumn(5).setPreferredWidth(100);
				
					pst.close();
					rs.close();
					
				} catch (Exception e) {
					JOptionPane.showMessageDialog(null, e);
				}
			
				JScrollPane scrlQuoteDetail = new JScrollPane();
				scrlQuoteDetail.setBounds(30, 30, 814, 264);
				paneQuoteDetailTable.add(scrlQuoteDetail);
				scrlQuoteDetail.setViewportView(tblQuoteDetail);
			}
		});
		tblQuotationsFiltered.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		scrlQuotationsFiltered.setViewportView(tblQuotationsFiltered);
		
		JLabel lblConvertAddress = new JLabel("Address");
		lblConvertAddress.setFont(new Font("Georgia", Font.BOLD, 16));
		lblConvertAddress.setBounds(361, 26, 355, 25);
		panelConvertQuotationList.add(lblConvertAddress);
		
		txtConvertAddress = new JTextField();
		txtConvertAddress.addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent e) {
				
				if(txtConvertSrchItemCode.getText().equals("") && txtConvertSrchItemDesc.getText().equals(""))
					filterQuotations(e);
				else
					filterQuotationsByItem(e);
			}
		});
		txtConvertAddress.setFont(new Font("Georgia", Font.PLAIN, 16));
		txtConvertAddress.setColumns(10);
		txtConvertAddress.setBounds(361, 51, 355, 25);
		panelConvertQuotationList.add(txtConvertAddress);
		
		txtConvertFromDate = new JDateChooser();
		txtConvertFromDate.addPropertyChangeListener(new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent arg0) {

				if(txtConvertSrchItemCode.getText().equals("") && txtConvertSrchItemDesc.getText().equals(""))
					filterQuotations(null);
				else
					filterQuotationsByItem(null);
			}
		});
		txtConvertFromDate.addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent arg0) {
				
				if(txtConvertSrchItemCode.getText().equals("") && txtConvertSrchItemDesc.getText().equals(""))
					filterQuotations(arg0);
				else
					filterQuotationsByItem(arg0);
			}
		});
		txtConvertFromDate.setDateFormatString("dd/MM/yyyy");
		txtConvertFromDate.setBounds(726, 51, 91, 25);
		panelConvertQuotationList.add(txtConvertFromDate);
		
		txtConvertToDate = new JDateChooser();
		txtConvertToDate.setDateFormatString("dd/MM/yyyy");
		txtConvertToDate.addPropertyChangeListener(new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent evt) {
				
				if(txtConvertSrchItemCode.getText().equals("") && txtConvertSrchItemDesc.getText().equals(""))
					filterQuotations(null);
				else
					filterQuotationsByItem(null);
			}
		});
		txtConvertToDate.addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent arg0) {
				
				if(txtConvertSrchItemCode.getText().equals("") && txtConvertSrchItemDesc.getText().equals(""))
					filterQuotations(arg0);
				else
					filterQuotationsByItem(arg0);
			}
		});
		txtConvertToDate.setBounds(830, 51, 91, 25);
		panelConvertQuotationList.add(txtConvertToDate);
		
		JPanel panelSalsTypeChoice = new JPanel();
		panelSalsTypeChoice.setBackground(UIManager.getColor("List.dropLineColor"));
		panelSalsTypeChoice.setBounds(650, 25, 589, 38);
		getContentPane().add(panelSalsTypeChoice);
		panelSalsTypeChoice.setLayout(null);
		
		JLabel lblConvertSrchItem = new JLabel("Search for Item");
		lblConvertSrchItem.setFont(new Font("Georgia", Font.BOLD, 16));
		lblConvertSrchItem.setBounds(10, 7, 137, 23);
		panelSalsTypeChoice.add(lblConvertSrchItem);
		
		txtConvertSrchItemCode = new JTextField();
		txtConvertSrchItemCode.addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent arg0) {
				
				if(txtConvertSrchItemCode.getText().equals("") && txtConvertSrchItemDesc.getText().equals(""))
					filterQuotations(null);
				else
					filterQuotationsByItem(null);
			}
		});
		txtConvertSrchItemCode.setBounds(157, 7, 86, 25);
		panelSalsTypeChoice.add(txtConvertSrchItemCode);
		txtConvertSrchItemCode.setColumns(10);
		
		txtConvertSrchItemDesc = new JTextField();
		txtConvertSrchItemDesc.addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent arg0) {
				
				if(txtConvertSrchItemCode.getText().equals("") && txtConvertSrchItemDesc.getText().equals(""))
					filterQuotations(null);
				else
					filterQuotationsByItem(null);
			}
		});
		txtConvertSrchItemDesc.setBounds(275, 7, 278, 25);
		panelSalsTypeChoice.add(txtConvertSrchItemDesc);
		txtConvertSrchItemDesc.setColumns(10);
		setTitle("Quotation Conversion");
		setVisible(true);

		filterQuotations(null);
	}
	

	public void filterQuotations(KeyEvent arg0){

		try {

			// Find the users filters entered and build the sql query string
			ResultSet rs;
			PreparedStatement pst;
			String query = "";
			String saleTypeFilter;
		
			if(rdbtnConvertRetailQuotations.isSelected())
				saleTypeFilter = "RetailQuote";
			else
				saleTypeFilter = "TradeQuote";
				
			query = "SELECT quotationNo as QUOTE_NO, name AS NAME, addressLine1 AS ADDRESS, DATE_FORMAT(orderDate,'%d-%m-%Y') AS DATE, phone AS PHONE, "
					+ "FORMAT(totalPostRounding,2) AS VALUE FROM quoteheader WHERE saleType='" + saleTypeFilter + "'";
			
			if(!txtConvertQuotationNo.getText().equals(""))
				query += " AND quotationNo = " + txtConvertQuotationNo.getText();
			
			if(!txtConvertName.getText().equals(""))
				query += " AND name LIKE '%" + txtConvertName.getText() + "%'";

			if(!txtConvertAddress.getText().equals(""))
				query += " AND addressLine1 LIKE '%" + txtConvertAddress.getText() + "%'";
			
			Date fromDate = txtConvertFromDate.getDateEditor().getDate();
			if(fromDate != null) {
				java.sql.Date sqlFromDate = new java.sql.Date(fromDate.getTime());
				query += " AND orderDate >= '" + sqlFromDate + "'";
			}
			
			Date toDate = txtConvertToDate.getDateEditor().getDate();
			if(toDate != null) {
				java.sql.Date sqlToDate = new java.sql.Date(toDate.getTime());
				query += " AND orderDate <= '" + sqlToDate + "'";
			}
						
			if(!txtConvertPhone.getText().equals(""))
				query += " AND phone LIKE '%" + txtConvertPhone.getText() + "%'";
			
			if(!txtConvertValue.getText().equals(""))
				query += " AND FORMAT(totalPostRounding,2) = " + Float.parseFloat(txtConvertValue.getText());
			
			query += " ORDER BY quotationNo";
			
			
			pst = getDao().conn.prepareStatement(query);

			rs = pst.executeQuery();
				
			tblQuotationsFiltered.setModel(DbUtils.resultSetToTableModel(rs));
			tblQuotationsFiltered.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		
			TableColumnModel columnModel = tblQuotationsFiltered.getColumnModel();
			columnModel.getColumn(0).setPreferredWidth(80);
			columnModel.getColumn(1).setPreferredWidth(200);
			columnModel.getColumn(2).setPreferredWidth(480);
			columnModel.getColumn(3).setPreferredWidth(80);
			columnModel.getColumn(4).setPreferredWidth(200);
			columnModel.getColumn(5).setPreferredWidth(80);
		
			// Set the tab key to the customer details possible matches table
			if(arg0 != null && arg0.getKeyCode() == KeyEvent.VK_TAB){
				tblQuotationsFiltered.requestFocus();
			}

			pst.close();
			rs.close();
			
		}catch(Exception ex){
			JOptionPane.showMessageDialog(null, ex);
		}

	}
	
	public void filterQuotationsByItem(KeyEvent arg0){

		try {

			// Find the users filters entered and build the sql query string
			ResultSet rs;
			PreparedStatement pst;
			String query = "";
			String saleTypeFilter;
		
			if(rdbtnConvertRetailQuotations.isSelected())
				saleTypeFilter = "RetailQuote";
			else
				saleTypeFilter = "TradeQuote";
				
			query = "SELECT DISTINCT header.quotationNo AS QUOTE_NO, header.name AS NAME, header.addressLine1 AS ADDRESS, DATE_FORMAT(header.orderDate,'%d-%m-%Y') AS DATE, "
					+ "header.phone AS PHONE, + FORMAT(header.totalPostRounding,2) AS VALUE  FROM quotedetail detail JOIN quoteheader header ON "
					+ "header.quotationNo=detail.quotationNo WHERE saleType='" + saleTypeFilter + "'";
			
			if (!txtConvertSrchItemCode.getText().equals(""))
				query += " AND detail.itemCode LIKE '%" + txtConvertSrchItemCode.getText() + "%'";
			
			if (!txtConvertSrchItemDesc.getText().equals(""))
				query += " AND detail.itemDescription LIKE '%" + txtConvertSrchItemDesc.getText() + "%'";
			
			if(!txtConvertQuotationNo.getText().equals(""))
				query += " AND header.quotationNo = " + txtConvertQuotationNo.getText();
			
			if(!txtConvertName.getText().equals(""))
				query += " AND header.name LIKE '%" + txtConvertName.getText() + "%'";

			if(!txtConvertAddress.getText().equals(""))
				query += " AND header.addressLine1 LIKE '%" + txtConvertAddress.getText() + "%'";
			
			Date fromDate = txtConvertFromDate.getDateEditor().getDate();
			if(fromDate != null) {
				java.sql.Date sqlFromDate = new java.sql.Date(fromDate.getTime());
				query += " AND header.orderDate >= '" + sqlFromDate + "'";
			}
			
			Date toDate = txtConvertToDate.getDateEditor().getDate();
			if(toDate != null) {
				java.sql.Date sqlToDate = new java.sql.Date(toDate.getTime());
				query += " AND header.orderDate <= '" + sqlToDate + "'";
			}
						
			if(!txtConvertPhone.getText().equals(""))
				query += " AND header.phone LIKE '%" + txtConvertPhone.getText() + "%'";
			
			if(!txtConvertValue.getText().equals(""))
				query += " AND FORMAT(totalPostRounding,2) = " + Float.parseFloat(txtConvertValue.getText());
			
			query += " ORDER BY header.quotationNo";
			
			
			pst = getDao().conn.prepareStatement(query);

			rs = pst.executeQuery();
				
			tblQuotationsFiltered.setModel(DbUtils.resultSetToTableModel(rs));
			tblQuotationsFiltered.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		
			TableColumnModel columnModel = tblQuotationsFiltered.getColumnModel();
			columnModel.getColumn(0).setPreferredWidth(80);
			columnModel.getColumn(1).setPreferredWidth(200);
			columnModel.getColumn(2).setPreferredWidth(480);
			columnModel.getColumn(3).setPreferredWidth(80);
			columnModel.getColumn(4).setPreferredWidth(200);
			columnModel.getColumn(5).setPreferredWidth(80);
		
			// Set the tab key to the customer details possible matches table
			if(arg0 != null && arg0.getKeyCode() == KeyEvent.VK_TAB){
				tblQuotationsFiltered.requestFocus();
			}

			pst.close();
			rs.close();
			
		}catch(Exception ex){
			JOptionPane.showMessageDialog(null, ex);
		}
	}
}
