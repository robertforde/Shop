package com.daniel.model;

import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.sql.ResultSet;

import com.daniel.AccountDetailScreen;
import com.daniel.AccountListScreen;
import com.daniel.dao.DAO;
import com.daniel.utilities.Utilities;

import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.Calendar;

import javax.swing.ImageIcon;
import javax.swing.JLabel;

public class TradeOrder extends Order implements Printable{

	private InvoiceSettings invoiceSettings;
	private ArrayList<TradeOrderLine> orderList = new ArrayList<TradeOrderLine>();
	private float lastSavedOrderValue = 0.0f;


	public ArrayList<TradeOrderLine> getOrderList() {
		return orderList;
	}

	public void setOrderList(ArrayList<TradeOrderLine> orderList) {
		this.orderList = orderList;
	} 

	public InvoiceSettings getInvoiceSettings() {
		return invoiceSettings;
	}

	public void setInvoiceSettings(InvoiceSettings invoiceSettings) {
		this.invoiceSettings = invoiceSettings;
	}
	
	public void addOrderLine(TradeOrderLine tradeOrderLine) {
		orderList.add(tradeOrderLine);
	}

	// Pre-Printing method that ensures the arraylists are updated and then saves the order details to the orderheader and orderdetail tables
	public void printOrder(InvoiceSettings invoiceSettings, AccountDetailScreen accountDetailScreen, AccountListScreen accountListScreen, Account acc) throws Exception{
		
		String query = "";
		PreparedStatement  pst = null;
		ResultSet rs = null;
		int detailLinesPerPage = 29;
		String headerTable;
		String detailTable;
		String typeNo;
		float balance = 0.0f;

		// Set the headerTable, detailTable and typeNo appropriately based on whether this is an order or a quote
		if(this.getSaleType().equals("Trade") || this.getSaleType().equals("Account")) {
			headerTable = "orderheader";
			detailTable = "orderdetail";
			typeNo = "receiptNo";
		}else {
			headerTable = "quoteheader";
			detailTable = "quotedetail";
			typeNo = "quotationNo";
		}

		// Set the invoice printing settings for this invoice to the current settings when this print was called
		setInvoiceSettings(invoiceSettings);
		
		// Firstly check if the order hasn't got a receipt number and if not get one, save all order lines and order header
		if(this.getReceiptNo() == 0) {
			
			// Call a method to get the next receipt number
			this.setReceiptNo(DAO.findNextReceiptNo(typeNo, headerTable));
			
			// Save the header info into the orderheader table
 			DAO.insertHeaderOrder(typeNo, headerTable, this);
			
			// Save the order lines into the detail table
 			int line = 0;
			line = DAO.insertDetailOrder(typeNo, detailTable, this);
			
			// add this order line to the number of lines to be printed
			this.setOrderLinesToPrint(line);
				
		}else{
			// Order saved before but to make sure we have all of the correct current info for the order we must save the header and all of the lines again
				
			// Update the header info into the header table
			DAO.updateHeaderOrder(typeNo, headerTable, this);
			
			// Firstly, delete all order lines for this order
			DAO.deleteDetailOrder(typeNo, detailTable, this.getReceiptNo());
			
			// Then loop through the order lines in the orderLine array and save them all
			int line = 0;
			line = DAO.insertDetailOrder(typeNo, detailTable, this);
			this.setOrderLinesToPrint(line);
			

		}
		
		// If this is a trade order/quote 
		if(this.getSaleType().equals("Trade") || this.getSaleType().equals("TradeQuote")) {
			// Save the Customer Details to the tradesman table if new customer details have been entered 
			if(getCustId()==0 && (!getName().isEmpty() || !getAddress1().isEmpty() || !getAddress2().isEmpty() || !getPhone().isEmpty()) ){

				DAO.tradesmanInsert(getName(), getAddress1(), getAddress2(), getPhone(), false);
							
			}else{

				DAO.tradesmanUpdate(String.valueOf(getCustId()), getName(), getAddress1(), getAddress2(), getPhone(), false);
							
			}

		} else if(this.getSaleType().equals("Account")){

			// Retrieve the account's balance to ensure that it the correct balance is being updated
			query = "SELECT balance FROM account WHERE accountId = ?";
			pst = DAO.conn.prepareStatement(query);
			pst.setInt( 1, this.getCustId());
			rs = pst.executeQuery();
				
			while(rs.next()){
				balance = rs.getFloat(1);
			}
							
			// Update the balance by adding the difference between the lastSavedOrderValue and the current order value 
			// (There could have been deletes and additions on the order since the last save, this is to cater for that)
			balance += Utilities.floatToNumDec(Float.parseFloat(this.getTotalPostRounding()) - lastSavedOrderValue,2) ;

			// For ACCOUNT orders - we need to save the amount that has been save to the database so as to calculate the difference on another save
			lastSavedOrderValue = Utilities.floatToNumDec(Float.parseFloat(this.getTotalPostRounding()),2);
			
			// Save the updated account's balance back to the database
			query = "UPDATE account SET balance = ? WHERE accountId = ?";
			pst.close();
			pst = DAO.conn.prepareStatement(query);
			pst.setFloat( 1, balance);
			pst.setInt( 2, this.getCustId());
			pst.executeUpdate();
				
			// Update the acc object with the new balance
			acc.setBalance(balance);
				
			accountDetailScreen.refreshAccountDetailsTable();
			accountListScreen.refreshAccountsTable();
			accountDetailScreen.getLblAccountDetailBalance().setText(Utilities.floatToString2Dec(acc.getBalance()));
		
		}

		if(rs != null)
			rs.close();
		if(pst != null)
			pst.close();
		
		PrinterJob job = PrinterJob.getPrinterJob();
	    job.setPrintable(this);
	    boolean ok = job.printDialog();
	    
	    // Calculate the total number of pages
	    this.setTotalPage( (this.getOrderLinesToPrint()/detailLinesPerPage) + (this.getOrderLinesToPrint()%detailLinesPerPage==0 ? 0:1) );
	    
	    if (ok) {
	       	try {
	       		job.print();
	       	} catch (PrinterException ex) {
	       		 //The job did not successfully complete 
	       	}
	    }


	}

	@Override
	public int print(Graphics graphics, PageFormat pageFormat, int pageIndex)
			throws PrinterException {

        String strOrderLinePrice = "";
		float orderLinePrice = 0.00f;
		float itemPrice = 0.00f;
		int qty = 0;
		int y = 240;
		int currentOrderLine = 1;
		String strTotalExVat = "";
        float totalExVat = 0.00f;
        String strTotalVat = "";
        float totalVat = 0.00f;
        String strTotalPostRound = "";
        float TotalPostRound = 0.00f;
        int detailLinesPerPage = 29;
        
		if (pageIndex >= this.getTotalPage()) 
            return NO_SUCH_PAGE;
        
		/* User (0,0) is typically outside the imageable area, so we must
         * translate by the X and Y values in the PageFormat to avoid clipping
         */
		Graphics2D g2d = (Graphics2D)graphics;
        g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());
        
        // Create the logo ImageIcon
		Image printLogo = new ImageIcon(this.getClass().getResource("/D S Logo110X109.jpg")).getImage();
		ImageIcon imageIconPrint = new ImageIcon(printLogo);
		
		// Create the faded body logo
		Image printFadeLogo = new ImageIcon(this.getClass().getResource("/D S Logo Fade 220X219.jpg")).getImage();
		ImageIcon imageIconFadePrint = new ImageIcon(printFadeLogo);
                
        Calendar c = Calendar.getInstance();
        String thisDate = String.valueOf(c.get(Calendar.DAY_OF_MONTH)) + "/" + String.valueOf(c.get(Calendar.MONTH) + 1) + "/" + String.valueOf(c.get(Calendar.YEAR));  
        
        if(invoiceSettings.getReceiptTopBanner()==1) {
        	g2d.drawImage(imageIconPrint.getImage(), invoiceSettings.getReceiptTopBannerX(), invoiceSettings.getReceiptTopBannerY(), null);
        	//g2d.drawImage(imageIconPrint.getImage(), 30, 20, null);
        }
        
        g2d.setFont(new Font("TimesRoman", Font.BOLD, 28));
        g2d.drawString("D & S Plumbing & Fixings", 150, 40);
        g2d.setFont(new Font("TimesRoman", Font.BOLD, 14));
        g2d.drawString("Unit 101, Malahide Road Industrial Estate, Dublin 17", 150, 80);
        g2d.drawString("Phone: 01 8473868 / 01 8473869",150 ,100 );
        g2d.drawString("Email: info@coolocktileoutlet.com",150 ,120 );
        g2d.setFont(new Font("TimesRoman", Font.BOLD, 16));
        g2d.drawString("Date: " + thisDate, 30, 165);
        g2d.drawString("Invoice No: " + this.getReceiptNo(), 30, 189);
        g2d.setFont(new Font("TimesRoman", Font.BOLD | Font.PLAIN, 10));
        g2d.drawRoundRect(200, 140, 200, 50, 20, 20);
        g2d.drawString(this.getName(), 205, 152);
        g2d.drawString(this.getAddress1(), 205, 164);
        g2d.drawString(this.getAddress2(), 205, 176);
        g2d.drawString(this.getPhone(), 205, 188);
        g2d.setFont(new Font("TimesRoman", Font.BOLD | Font.ITALIC, 12));
        g2d.drawString("Page " + (pageIndex+1) + " of " + this.getTotalPage(), 480, 177);

		if(invoiceSettings.getReceiptBodyImage()==1) {
			g2d.drawImage(imageIconFadePrint.getImage(), invoiceSettings.getReceiptBodyImageX(), invoiceSettings.getReceiptBodyImageY(), null);
			//g2d.drawImage(imageIconFadePrint.getImage(), 195, 310, null);
		}
		
               
        g2d.setFont(new Font("TimesRoman", Font.BOLD, 12));
        
        if(invoiceSettings.getReceiptVerticalGridLines()==1) {
        	g2d.drawLine(30, 230, 30, 670);
        }
        
        g2d.drawString("ITEM ",32 ,220 );
        
        if(invoiceSettings.getReceiptVerticalGridLines()==1) {
        	g2d.drawLine(115, 230, 115, 670);
        }

        g2d.drawString("DESCRIPTION",120 ,220 );
        
        if(invoiceSettings.getReceiptVerticalGridLines()==1) {
        	g2d.drawLine(430, 230, 430, 670);
        }
        
        g2d.drawString("PRICE",435 ,220 );
        
        if(invoiceSettings.getReceiptVerticalGridLines()==1) {
        	g2d.drawLine(480, 230, 480, 670);
        }
        
        g2d.drawString("QTY",485 ,220 );
        
        if(invoiceSettings.getReceiptVerticalGridLines()==1) {
        	g2d.drawLine(520, 230, 520, 670);
        }
        
        g2d.drawString("TOTAL",530 ,220 );
        
        if(invoiceSettings.getReceiptVerticalGridLines()==1) {
        	g2d.drawLine(570, 230, 570, 670);
        }
        
        g2d.drawLine(30, 230, 570, 230);
		
		// Loop through order and print the order lines
        
        g2d.setFont(new Font("TimesRoman", Font.PLAIN, 12));
		for(TradeOrderLine ol : this.getOrderList()) {
			
			// Only print order lines that are meant for the current page
			if(currentOrderLine > pageIndex *detailLinesPerPage && currentOrderLine <= (pageIndex+1)*detailLinesPerPage) {
			
				g2d.drawString(ol.getItemCode(), 32 ,y );
				
				g2d.drawString(ol.getItemDescription(), 120 ,y );
				
				String strItemPrice = ol.getItemPrice();
				itemPrice = Float.parseFloat(strItemPrice);
				if(itemPrice > 999.99 && itemPrice < 10000) {
					g2d.drawString(strItemPrice, 435 ,y );
				}
				else if(itemPrice > 99.99 && itemPrice < 1000) {
					g2d.drawString(strItemPrice, 441 ,y );
				}
				else if(itemPrice > 9.99 && itemPrice < 100) {
					g2d.drawString(strItemPrice, 448 ,y );
				}
				else if(itemPrice < 10) {
					g2d.drawString(strItemPrice, 454 ,y );
				}
				
				String strQty = ol.getOrderQty();
				qty =  Integer.parseInt(strQty);
				if(qty < 10) {
					g2d.drawString(strQty, 507 ,y );				
				}else if(qty < 100) {
					g2d.drawString(strQty, 500 ,y );
				}else {
					g2d.drawString(strQty, 493 ,y );
				}
				
				strOrderLinePrice = ol.getValueExVat();
				orderLinePrice = Float.parseFloat(ol.getValueExVat());
				if(orderLinePrice>9999.99) {
					g2d.drawString(strOrderLinePrice, 522 ,y );
				}
				else if(orderLinePrice > 999.99 && orderLinePrice < 10000) {
					g2d.drawString(strOrderLinePrice, 529 ,y );
				}
				else if(orderLinePrice > 99.99 && orderLinePrice < 1000) {
					g2d.drawString(strOrderLinePrice, 535 ,y );
				}
				else if(orderLinePrice > 9.99 && orderLinePrice < 100) {
					g2d.drawString(strOrderLinePrice, 541 ,y );
				}
				else if(orderLinePrice < 10) {
					g2d.drawString(strOrderLinePrice, 547 ,y );
				}
				y += 15;
			}
			currentOrderLine++;
		}
		
		// Print the total if this is the last page
		if(pageIndex + 1 == this.getTotalPage()){
			
			g2d.drawString("Total Excl VAT", 435 ,684 );
			strTotalExVat = this.getTotalExVat();
			totalExVat = Float.parseFloat(strTotalExVat);
			if(totalExVat>9999.99) {
				g2d.drawString(strTotalExVat, 522 ,684 );
			}
			else if(totalExVat > 999.99 && totalExVat < 10000) {
				g2d.drawString(strTotalExVat, 525 ,684 );
			}
			else if(totalExVat > 99.99 && totalExVat < 1000) {
				g2d.drawString(strTotalExVat, 532 ,684 );
			}
			else if(totalExVat > 9.99 && totalExVat < 100) {
				g2d.drawString(strTotalExVat, 539 ,684 );
			}
			else if(totalExVat < 10) {
				g2d.drawString(strTotalExVat, 545 ,684 );
			}
			
			g2d.drawLine(430, 689, 570, 689);
			
			g2d.drawString("VAT @ " + Utilities.stringToDec(Float.toString(invoiceSettings.getReceiptVatRate())) + "%", 433 ,702 );
			strTotalVat = this.getTotalVat();
			totalVat = Float.parseFloat(strTotalVat);
			if(totalVat>9999.99) {
				g2d.drawString(strTotalVat, 522 ,702 );
			}
			else if(totalVat > 999.99 && totalVat < 10000) {
				g2d.drawString(strTotalVat, 525 ,702 );
			}
			else if(totalVat > 99.99 && totalVat < 1000) {
				g2d.drawString(strTotalVat, 532 ,702 );
			}
			else if(totalVat > 9.99 && totalVat < 100) {
				g2d.drawString(strTotalVat, 539 ,702 );
			}
			else if(totalVat < 10) {
				g2d.drawString(strTotalVat, 545 ,702 );
			}
			
			g2d.drawLine(430, 708, 570, 708);

			g2d.setFont(new Font("TimesRoman", Font.BOLD, 14));
			g2d.drawString("TOTAL", 460 ,722 );
			strTotalPostRound = this.getTotalPostRounding();
			TotalPostRound = Float.parseFloat(strTotalPostRound);
			if(TotalPostRound>9999.99) {
				g2d.drawString(strTotalPostRound, 522, 722 );
			}
			else if(TotalPostRound > 999.99 && TotalPostRound < 10000) {
				g2d.drawString(strTotalPostRound, 522, 722 );
			}
			else if(TotalPostRound > 99.99 && TotalPostRound < 1000) {
				g2d.drawString(strTotalPostRound, 530, 722 );
			}
			else if(TotalPostRound > 9.99 && TotalPostRound < 100) {
				g2d.drawString(strTotalPostRound, 537, 722 );
			}
			else if(TotalPostRound < 10) {
				g2d.drawString(strTotalPostRound, 544, 722 );
			}
			g2d.setFont(new Font("TimesRoman", Font.PLAIN, 12));
			
			if(invoiceSettings.getReceiptVerticalGridLines()==1) {
				g2d.drawLine(430, 670, 430, 728);
			}
			if(invoiceSettings.getReceiptVerticalGridLines()==1) {
				g2d.drawLine(520, 670, 520, 728);
			}
			if(invoiceSettings.getReceiptVerticalGridLines()==1) {
				g2d.drawLine(570, 670, 570, 728);
			}
			
			g2d.drawLine(430, 728, 570, 728);
		}
		
        g2d.drawLine(30, 670, 570, 670);

        g2d.setFont(new Font("TimesRoman", Font.PLAIN, 10));
        g2d.drawString(invoiceSettings.getReceiptFooterLine1(), 30 ,720 );
        g2d.drawString(invoiceSettings.getReceiptFooterLine2(), 30 ,730 );
        g2d.drawString(invoiceSettings.getReceiptFooterLine3(), 30 ,740 );
        /*g2d.drawString("Returns are accepted up to 30 days from time of purchase", 30 ,720 );
        g2d.drawString("Returns must be complete, unused, in their original packaging and accompanied by a receipt", 30 ,730 );
        g2d.drawString("Please note, there is no return on powered goods", 30 ,740 );
        */
		
		/* tell the caller that this page is part of the printed document */

        return PAGE_EXISTS;
	}

	public void recalculateAfterDelete(float vatRate, JLabel lblGrossProfitValue, JLabel lblGrossProfitPercent){
		
		float valExDisc = 0.00f;
		String strvalExDisc;
		float valExVat = 0.00f;
		String strValExVat;
		float orderTotExVat = 0.00f;
		String strorderTotExVat;
		float totalVat = 0.00f;
		float totalPreRounding = 0.00f;
		float totalCost = 0.00f;

		
		// Loop through the order lines and recalculate the relevant line and header values
		for(TradeOrderLine tradeOrderLine : getOrderList()){
			
			// Get Order Line Price and covert it to a 2 decimal string
			valExDisc = Float.parseFloat(tradeOrderLine.getItemPrice()) * Integer.parseInt(tradeOrderLine.getOrderQty());
			strvalExDisc = String.format("%.2f", valExDisc);
			strvalExDisc = Utilities.stringToDec(strvalExDisc);
			tradeOrderLine.setValueExDiscount(strvalExDisc);
					
			// Get Order Line Price exclusive of vat and covert it to a 2 decimal string
			valExVat = valExDisc;
			strValExVat = String.format("%.2f", valExVat);
			strValExVat = Utilities.stringToDec(strValExVat);
			tradeOrderLine.setValueExVat(strValExVat);
				
			// Add the Order Line total to the Order's total ex-vat value and round to 2 Decimals
			orderTotExVat += valExVat;
			strorderTotExVat = String.format("%.2f",orderTotExVat);
			strorderTotExVat = Utilities.stringToDec(strorderTotExVat);
			setTotalExVat(strorderTotExVat);
		
		
			// Calculate the vat and add it to the order
			totalVat = Utilities.floatToNumDec(orderTotExVat/100*vatRate,2);
			totalPreRounding = Utilities.floatToNumDec(orderTotExVat + totalVat,2);
			setTotalVat(Utilities.stringToDec(String.valueOf(totalVat)));
			setTotalPreRounding(Utilities.stringToDec(String.valueOf(totalPreRounding)));
			
			// Set the Post Rounding price to the same as the Pre Rounding price as there is no rounding with order when line deleted and clear the order's rounding value
			setTotalPostRounding(Utilities.stringToDec(getTotalPreRounding()));
			setRounding("0.00");
					
			// Add up the cost of the remaining items
			totalCost += tradeOrderLine.getLineCostValue();

		}
		
		// Update the cost price
		setTotalCost(totalCost);

		calcGrossProfit(lblGrossProfitValue, lblGrossProfitPercent);
	
	}
		
	public void calcGrossProfit(JLabel lblGrossProfitValue, JLabel lblGrossProfitPercent) {
		
		float sellingPrice = Float.valueOf(getTotalExVat());
		float costPrice = getTotalCost();
		float grossProfit = Utilities.floatToNumDec(sellingPrice - costPrice,2);
		float grossProfitPercent = Utilities.floatToNumDec(grossProfit / costPrice * 100,2);
		lblGrossProfitValue.setText("\u20AC " + Utilities.stringToDec(String.valueOf(grossProfit)));
		lblGrossProfitPercent.setText(Utilities.stringToDec(String.valueOf(grossProfitPercent)) + " %");
	}

}

